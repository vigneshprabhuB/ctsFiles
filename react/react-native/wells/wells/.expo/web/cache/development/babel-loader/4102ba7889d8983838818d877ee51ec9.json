{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/804266/AdmHackathon/react/react-native/wells/wells/components/login/LoginPage.js\";\nimport React, { useState, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { styles } from \"../Styles\";\nimport * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Linking from 'expo-linking';\nWebBrowser.maybeCompleteAuthSession();\nexport function LoadLoginPage(_ref) {\n  var _route$params;\n\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      userName = _React$useState2[0],\n      setUserName = _React$useState2[1];\n\n  var _Google$useAuthReques = Google.useAuthRequest({\n    expoClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com',\n    androidClientId: '806471521542-5jnse22n0bn8ovklkllqo7db94n5k1qg.apps.googleusercontent.com',\n    webClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com'\n  }, {\n    \"scheme\": \"wells\"\n  }),\n      _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n      request = _Google$useAuthReques2[0],\n      response = _Google$useAuthReques2[1],\n      promptAsync = _Google$useAuthReques2[2];\n\n  if ((_route$params = route.params) != null && _route$params.token) {\n    var _route$params2;\n\n    getProfileInfo((_route$params2 = route.params) == null ? void 0 : _route$params2.token);\n  }\n\n  React.useEffect(function () {\n    extractAccesToken();\n\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var authentication = response.authentication;\n      getProfileInfo(authentication.accessToken);\n    } else {\n      console.log(response);\n    }\n  });\n\n  getProfileInfo = function getProfileInfo(accessToken) {\n    fetch('https://www.googleapis.com/oauth2/v1/userinfo?alt=json', {\n      'headers': {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      return setUserName(data.name);\n    });\n  };\n\n  extractAccesToken = function extractAccesToken() {\n    Linking.getInitialURL().then(function (a) {\n      alert('URL:::' + a);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.top,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.loginForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.loginTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"SIGN IN \"), React.createElement(TextInput, {\n    style: styles.loginButton,\n    value: JSON.stringify(response),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    style: styles.loginButtonIn,\n    title: \"Sign In With Google\",\n    onPress: function onPress() {\n      promptAsync({\n        useProxy: true\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 42\n    }\n  })), React.createElement(View, {\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    style: styles.loginButtonIn,\n    title: \"Sign In With Google\",\n    onPress: function onPress() {\n      promptAsync({\n        useProxy: true,\n        showInRecents: true\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 44\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/804266/AdmHackathon/react/react-native/wells/wells/components/login/LoginPage.js"],"names":["React","useState","Component","styles","Google","WebBrowser","Linking","maybeCompleteAuthSession","LoadLoginPage","route","navigation","userName","setUserName","useAuthRequest","expoClientId","androidClientId","webClientId","request","response","promptAsync","params","token","getProfileInfo","useEffect","extractAccesToken","type","authentication","accessToken","console","log","fetch","then","json","data","name","getInitialURL","a","alert","container","top","loginForm","loginTitle","loginButton","JSON","stringify","loginButtonIn","useProxy","showInRecents"],"mappings":"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","sourcesContent":["import React, { useState, Component } from 'react';\nimport { Text, TextInput, View, Button } from 'react-native';\nimport { styles } from '../Styles';\nimport * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Linking from 'expo-linking';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport function LoadLoginPage({ route, navigation }) {\n\n\n\n  const [userName, setUserName] = React.useState();\n\n  const [request, response, promptAsync] = Google.useAuthRequest({\n    expoClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com',\n    androidClientId: '806471521542-5jnse22n0bn8ovklkllqo7db94n5k1qg.apps.googleusercontent.com',\n    webClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com',\n  }, { \"scheme\": \"wells\" });\n\n  if (route.params?.token) {\n    getProfileInfo(route.params?.token);\n  }\n  React.useEffect(() => {\n    \n    \n    extractAccesToken();\n    if (response?.type === 'success') {\n      const { authentication } = response;\n      getProfileInfo(authentication.accessToken);\n\n    } else {\n      console.log(response);\n    }\n  });\n\n  getProfileInfo = function (accessToken) {\n    fetch('https://www.googleapis.com/oauth2/v1/userinfo?alt=json', { 'headers': { 'Authorization': 'Bearer ' + accessToken } })\n      .then(response => response.json())\n      .then(data => setUserName(data.name))\n      //.then(() => navigation.navigate('dashBoard'));\n  }\n  extractAccesToken= function () {\n    Linking.getInitialURL().then(a => {\n      alert('URL:::'+a);   \n    });\n  }\n\n  return (\n    <View style={styles.container} >\n      <View style={styles.top}>\n\n      </View>\n      <View style={styles.loginForm}>\n        <Text style={styles.loginTitle}>SIGN IN </Text>\n        <TextInput style={styles.loginButton} value={JSON. stringify(response)}></TextInput>\n\n        <View style={styles.loginButton}><Button style={styles.loginButtonIn}\n          title=\"Sign In With Google\"\n          onPress={() => {\n            promptAsync({ useProxy: true });\n          }}\n        /></View>\n          <View style={styles.loginButton}><Button style={styles.loginButtonIn}\n          title=\"Sign In With Google\"\n          onPress={() => {\n            promptAsync({ useProxy: true ,showInRecents:true});\n          }}\n        /></View>\n      </View>\n    </View>);\n\n}\n"]},"metadata":{},"sourceType":"module"}