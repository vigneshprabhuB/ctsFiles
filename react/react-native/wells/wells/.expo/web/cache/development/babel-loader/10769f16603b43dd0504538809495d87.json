{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/804266/AdmHackathon/react/react-native/wells/wells/components/login/LoginPage.js\";\nimport React, { useState, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { styles } from \"../Styles\";\nimport * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nWebBrowser.maybeCompleteAuthSession();\nexport function LoadLoginPage() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      userName = _React$useState2[0],\n      setUserName = _React$useState2[1];\n\n  var _Google$useAuthReques = Google.useAuthRequest({\n    expoClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com',\n    androidClientId: '806471521542-5jnse22n0bn8ovklkllqo7db94n5k1qg.apps.googleusercontent.com',\n    webClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com'\n  }, {\n    \"scheme\": \"wells\"\n  }),\n      _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n      request = _Google$useAuthReques2[0],\n      response = _Google$useAuthReques2[1],\n      promptAsync = _Google$useAuthReques2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var authentication = response.authentication;\n      authentication.accessToken;\n      fetch('https://www.googleapis.com/oauth2/v1/userinfo?alt=json', {\n        'headers': {\n          'Authorization': 'Bearer ' + authentication.accessToken\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return setUserName(data.name);\n      });\n      console.log(authentication);\n    } else {\n      console.log(response);\n    }\n  }, [response]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.top,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.loginForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.loginTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"SIGN IN \", userName), React.createElement(TextInput, {\n    keyboardType: \"email-address\",\n    placeholder: \"Email ID\",\n    style: styles.loginTextInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    secureTextEntry: true,\n    style: styles.default,\n    placeholder: \"Password\",\n    style: styles.loginTextInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.loginButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    style: styles.loginButtonIn,\n    title: \"Login\",\n    onPress: function onPress() {\n      promptAsync();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 42\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/804266/AdmHackathon/react/react-native/wells/wells/components/login/LoginPage.js"],"names":["React","useState","Component","styles","Google","WebBrowser","maybeCompleteAuthSession","LoadLoginPage","userName","setUserName","useAuthRequest","expoClientId","androidClientId","webClientId","request","response","promptAsync","useEffect","type","authentication","accessToken","fetch","then","json","data","name","console","log","container","top","loginForm","loginTitle","loginTextInput","default","loginButton","loginButtonIn"],"mappings":"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","sourcesContent":["import React, { useState, Component } from 'react';\nimport { Text, TextInput, View, Button } from 'react-native';\nimport { styles } from '../Styles';\nimport * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nWebBrowser.maybeCompleteAuthSession();\n\nexport function LoadLoginPage() {\n\n  const [userName, setUserName] = React.useState();\n\n  const [request, response, promptAsync] = Google.useAuthRequest({\n    expoClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com',\n    androidClientId: '806471521542-5jnse22n0bn8ovklkllqo7db94n5k1qg.apps.googleusercontent.com',\n    webClientId: '806471521542-7k36fosa636pickaes2q3gpkdh2tifcj.apps.googleusercontent.com',\n  }, { \"scheme\": \"wells\" });\n  React.useEffect(() => {\n    if (response?.type === 'success') {\n      const { authentication } = response;\n      authentication.accessToken\n      fetch('https://www.googleapis.com/oauth2/v1/userinfo?alt=json', { 'headers': { 'Authorization': 'Bearer ' + authentication.accessToken } })\n        .then(response => response.json())\n        .then(data => setUserName(data.name));\n\n      console.log(authentication);\n    } else {\n      console.log(response);\n    }\n  }, [response]);\n\n  return (\n    <View style={styles.container} >\n      <View style={styles.top}>\n\n      </View>\n      <View style={styles.loginForm}>\n        <Text style={styles.loginTitle}>SIGN IN {userName}</Text>\n\n        <TextInput keyboardType=\"email-address\" placeholder=\"Email ID\" style={styles.loginTextInput} />\n\n        <TextInput secureTextEntry={true} style={styles.default} placeholder=\"Password\" style={styles.loginTextInput} />\n        <View style={styles.loginButton}><Button style={styles.loginButtonIn}\n          title=\"Login\"\n          onPress={() => {\n            promptAsync();\n          }}\n        /></View>\n      </View>\n    </View>);\n\n}\n"]},"metadata":{},"sourceType":"module"}